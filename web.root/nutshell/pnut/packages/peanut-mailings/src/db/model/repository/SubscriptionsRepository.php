<?php 
/** 
 * Created by /tools/create-model.php 
 * Time:  2024-09-28 20:51:51
 */ 
namespace Peanut\mailings\db\model\repository;


use Peanut\mailings\db\model\entity\Subscription;
use \PDO;
use PDOStatement;
use Tops\db\TDatabase;
use \Tops\db\TEntityRepository;
use Tops\sys\TIdentifier;

class SubscriptionsRepository extends \Tops\db\TEntityRepository
{
    const status_approved = 1;
    const status_unsubscribed = 2;
    const status_inactive = 3;
    const emailAddressTable = 'twoq_emailaddresses';

    public function getSubscriptionByEmail($emailId, $listId)
    {
        return $this->getSingleEntity('emailId=? and listid=?',[$emailId,$listId]);
    }
    public function getUidBySubscription($emailId, $listId)
    {
        $result = $this->getSingleEntity('emailId=? and listid=?',[$emailId,$listId]);
        $u = $result->uid;
        return $u;
    }

    public function getSubscriptionInfoByUid($uid)
    {
        $sql = 'SELECT e.`fullname` as personName,l.`name` AS listName FROM `twoq_subscriptions` s '.
                'JOIN `twoq_emailaddresses` e ON s.`emailid` = e.`id` '.
                'JOIN `qnut_email_lists` l ON s.`listid` = l.id '.
                'WHERE s.`uid` = ?';
        $stmt = $this->executeStatement($sql,[$uid]);
        return $stmt->fetchObject();
    }

    public function addNew($emailId, $listId) : Subscription
    {
        $dto = new Subscription();
        $dto->emailid = $emailId;
        $dto->listid = $listId;
        $dto->status = self::status_approved;

        $dto->id = $this->insert($dto);
        $result =  $this->get($dto->id);

        // uid is autogenerated by insert
        if (!$result) {
            $dto->uid = '!error';
        }
        else {
            $dto->uid = $result->uid;
        }
        return $dto;
    }

    public function deleteOrphans()
    {
        $sql =
            'DELETE FROM `twoq_emailaddresses` WHERE id NOT IN (SELECT emailid FROM `twoq_subscriptions`)';
        $this->executeStatement($sql);


    }

    public function getActiveSubscribers($listId)
    {
        $sql = 'SELECT e.`email`,e.`fullname`,s.`uid` '.
            'FROM `twoq_subscriptions` s '.
            'JOIN `twoq_emailaddresses` e ON e.`id` = s.`emailid` '.
            'WHERE s.`status` = 1 AND e.`status` = 1 AND s.`listid` = ?';
        $stmt = $this->executeStatement($sql,[$listId]);
        return $stmt->fetchAll(PDO::FETCH_OBJ);
    }

    public function unsubscribe($uid)
    {
        $sql = 'update '.$this->getTableName().' set status=? WHERE uid=?';
        return $this->executeStatement($sql,[self::status_unsubscribed,$uid]);
    }

    public function resubscribe($uid)
    {
        $sql = 'update '.$this->getTableName().' set status=? WHERE uid=?';
        return $this->executeStatement($sql,[self::status_approved,$uid]);
    }

    public function updateUid($id)
    {

        $uid = TIdentifier::NewId();;
        $sql = 'UPDATE twoq_subscriptions SET uid = ? WHERE id=?';
        $this->executeStatement($sql,[$uid,$id]);

    }

    public function deleteTestRecords()
    {
        $sql = "DELETE FROM `twoq_subscriptions` s
                WHERE s.`emailid` IN 
                (SELECT e.id FROM `twoq_emailaddresses` e 
                WHERE e.`email` LIKE 'test@%')";
        return $this->executeStatement($sql);
    }


    protected function updateStatus($emailId, $listId, $statusId)
    {
        $this->executeStatement('UPDATE '.$this->getTableName().
            ' SET status=? WHERE listid=? AND emailid=?',[$statusId,$listId,$emailId]);
    }


    protected function getTableName() {
        return 'twoq_subscriptions';
    }

    protected function getDatabaseId() {
        return 'twoq';
    }

    protected function getClassName() {
        return 'Peanut\mailings\db\model\entity\Subscription';
    }

    protected function getFieldDefinitionList()
    {
        return array(
        'id'=>PDO::PARAM_STR,
        'emailid'=>PDO::PARAM_STR,
        'listid'=>PDO::PARAM_STR,
        'status'=>PDO::PARAM_STR,
        'uid' => PDO::PARAM_STR);
    }

    public function getListSubscriptions($listId)
    {

        $sql =
            'SELECT s.`id`, e.`id` AS emailId, fullname, e.`email` , '.
            "CONCAT(e.`email`,IF(e.`status` = 1,'',CONCAT(' (',es.`description`,')'))) AS emailAddress, ".
            'ss.`name` AS `status`, ss.`description` AS `statusDescription`, '.
            's.`status` AS statusId, e.`status` AS emailStatusId '.
            'FROM `twoq_subscriptions` s  '.
            'JOIN `twoq_emailaddresses` e ON s.`emailid` = e.`id`  '.
            'JOIN `twoq_subscriptionstatus` ss ON s.`status` = ss.`id` '.
            'JOIN `twoq_emailstatus` es ON e.`status` = es.`id` '.
            'WHERE s.`listid` = ? '.
            'ORDER BY fullname';

        $stmt = $this->executeStatement($sql, [$listId]);
        return $stmt->fetchAll(PDO::FETCH_OBJ);
    }


    public function AddNewSubscription($listCode, $email, $fullname)
    {
       // $this->addNew()

    }
}